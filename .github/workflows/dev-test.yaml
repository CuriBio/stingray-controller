name: Dev

on:
  workflow_dispatch:
    inputs:
      randomlyseed:
        description: "Pytest Randomly Seed"
        required: false
        default: ""
      api_endpoint:
        description: "Cloud API endpoint"
        required: true
        default: "test"
        type: choice
        options:
          - test
          - modl
          - prod
  schedule:
    - cron: "0 5 * * *"
  push:
    branches:
      - main
      - development
  pull_request:

jobs:
  test:
    strategy:
      fail-fast: false
      matrix:
        os:
          - "ubuntu-22.04"
          - "windows-2022"
        python-version:
          - "3.11"
        node-version:
          - "16"
        include:
          # only enable coverage on the fastest job
          - os: "ubuntu-22.04"
            python-version: "3.11"
            node-version: "16"
            IS_FASTEST_JOB: true
          - os: "windows-2022"
            python-version: "3.11"
            node-version: "16"
            IS_DEPLOYMENT_CONFIG: true

    name: Python ${{ matrix.python-version }} with Node ${{ matrix.node-version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Get Version
        id: software-version
        uses: notiz-dev/github-action-json-property@v0.2.0
        with:
          path: "electron/package.json"
          prop_path: "version"

      - name: Get Product Name
        id: product-name
        uses: notiz-dev/github-action-json-property@v0.2.0
        with:
          path: "electron/package.json"
          prop_path: "name"

      - name: Set Up Langs
        uses: ./.github/actions/set-up-langs

      # - name: Cache node modules # https://docs.github.com/en/free-pro-team@latest/actions/guides/caching-dependencies-to-speed-up-workflows
      #   uses: actions/cache@v3
      #   env:
      #     cache-name: cache-node-modules
      #   with:
      #     path: ./.npm_cache
      #     key: ${{ matrix.os }}-${{ matrix.node-version }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
      #     restore-keys: |
      #       ${{ matrix.os }}-${{ matrix.node-version }}-build-${{ env.cache-name }}-

      # - name: Cache Python modules
      #   uses: actions/cache@v3
      #   env:
      #     cache-name: cache-python-modules
      #   with:
      #     path: ./TODO
      #     key: ${{ matrix.os }}-${{ matrix.python-version }}-build-${{ env.cache-name }}-${{ hashFiles('**/Pipfile.lock') }}
      #     restore-keys: |
      #       ${{ matrix.os }}-${{ matrix.python-version }}-build-${{ env.cache-name }}-

      # - name: Cache Pre-commit hooks
      #   uses: actions/cache@v3
      #   env:
      #     cache-name: cache-pre-commit-hooks
      #   if: matrix.IS_FASTEST_JOB == true
      #   with:
      #     path: ~/.precommit_cache # Eli (10/22/20): Having the pre-commit cache inside the repo creates problems with Pytest detecting test files inside the cache
      #     key: ${{ matrix.os }}-${{ matrix.python-version }}-${{ matrix.node-version }}-build-${{ env.cache-name }}-${{ hashFiles('**/.pre-commit-config.yaml') }}
      #     restore-keys: |
      #       ${{ matrix.os }}-${{ matrix.python-version }}-${{ matrix.node-version }}-build-${{ env.cache-name }}-

      - name: Display Chrome version (Windows)
        if: runner.os == 'Windows'
        run: (Get-Item (Get-ItemProperty 'HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\App Paths\chrome.exe').'(Default)').VersionInfo

      - name: Display Chrome version (Linux)
        if: runner.os == 'Linux'
        run: |
          google-chrome --version
          chromedriver --version

      - name: Display Extracted Software Version and Product Name
        run: |
          echo ${{steps.software-version.outputs.prop}}
          echo ${{steps.product-name.outputs.prop}}

      - name: Set Up Controller
        uses: ./.github/actions/set-up-controller

      # TODO put these into Set Up Controller and rename the action
      - name: Setup UI
        run: |
          cd ui/
          npm ci

      - name: Setup Electron
        run: |
          cd electron/
          npm ci

      - name: Run pre-commit hooks
        # only enable pre-commit on the fastest job.
        if: matrix.IS_FASTEST_JOB == true
        env:
          PRE_COMMIT_HOME: ~/.precommit_cache
        run: |
          cd controller/
          poetry run pre-commit install
          poetry run pre-commit run -a

      - name: Run Python Tests with randomly generated seed
        if: github.event.inputs.randomlyseed == ''
        timeout-minutes: 15
        run: |
          cd controller/
          poetry run pytest -xsvv --cov-report=xml --include-slow-tests --full-ci

      - name: Run Python Tests with supplied pytest-randomly seed
        if: github.event.inputs.randomlyseed != ''
        timeout-minutes: 15
        run: |
          cd controller/
          poetry run pytest -xsvv --cov-report=xml --include-slow-tests --full-ci --randomly-seed=${{ github.event.inputs.randomlyseed }}

      # TODO
      # - name: Run Jest Tests for Electron
      #   run: npm run test:unit -- --ci

      # - name: Run Unit Tests for UI
      #   if: matrix.IS_FASTEST_E2E_SUITE == true
      #   env:
      #     TEST_ENV: CI
      #   run: npm run test:unit-no-prebuild -- --ci --verbose

      - name: Confirm no extra files generated by this test suite
        if: matrix.IS_FASTEST_JOB == true
        env:
          PRE_COMMIT_HOME: ./.precommit_cache
        # only enable pre-commit on the fastest job
        run: |
          cd controller/
          poetry run pre-commit run git-dirty -a

      - name: Insert the Build Number and Software Version into the code
        shell: bash
        run: |
          sed -i 's/REPLACETHISWITHTIMESTAMPDURINGBUILD/'"$(date +'%y%m%d%H%M%S')"'--${{github.run_number}}/g' controller/src/controller/constants.py
          sed -i 's/REPLACETHISWITHVERSIONDURINGBUILD/'"${{steps.software-version.outputs.prop}}"'/g' controller/src/controller/constants.py
          sed -i 's/REPLACETHISWITHENDPOINTDURINGBUILD/'"${{github.event.inputs.api_endpoint}}"'/g' controller/src/controller/constants.py
          sed -i 's/REPLACETHISWITHENDPOINTDURINGBUILD/'"${{github.event.inputs.api_endpoint}}"'/g' electron/main/index.js

      - name: Compile the Python Executable
        run: |
          cd controller/
          poetry run pyinstaller pyinstaller.spec --log-level=DEBUG --distpath=../electron/dist-python --workpath=build-python

      - name: Run Python Tests on Executable with randomly generated seed
        if: github.event.inputs.randomlyseed == ''
        run: |
          cd controller/
          poetry run pytest tests/test_exe.py -xsvv --only-exe --no-cov

      - name: Run Python Tests on Executable with supplied pytest-randomly seed
        if: github.event.inputs.randomlyseed != ''
        run: |
          cd controller/
          poetry run pytest tests/test_exe.py -xsvv --only-exe --no-cov --randomly-seed=${{ github.event.inputs.randomlyseed }}

      - name: Upload coverage to Codecov
        # only upload coverage from fastest job
        if: matrix.IS_FASTEST_JOB == true
        uses: codecov/codecov-action@v3
        timeout-minutes: 1
        continue-on-error: true
        with:
          file: ./coverage.xml
          flags: unittests
          env_vars: OS,PYTHON
          name: codecov-umbrella
          fail_ci_if_error: true

      - name: Build Full Electron App
        run: |
          cd ui/
          npm run build
          cd ../electron
          npm run build-unstable

      # - name: Archive Installer File
      #   if: runner.os == 'Windows'
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: installer--${{ matrix.os }}--${{ matrix.node-version }}--${{ matrix.python-version }}
      #     path: "dist/Stingray*.exe"

      # - name: Archive Dist Folder
      #   if: runner.os == 'Windows'
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: dist--${{ matrix.os }}--${{ matrix.node-version }}--${{ matrix.python-version }}
      #     path: "dist/**/*"
